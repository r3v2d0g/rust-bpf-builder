# This docker file is based on the llvm docker file example located here:
# https://github.com/llvm-mirror/llvm/blob/master/utils/docker/debian8/Dockerfile

FROM launcher.gcr.io/google/debian9:latest as builder
LABEL maintainer "Solana Maintainers"

# Import public key required for verifying signature of cmake download.
# Note, this often fails, do it first
#RUN gpg --no-tty --keyserver hkp://pgp.mit.edu --recv 0x2D2CEF1034921684

# Install build dependencies of rust.
# First, Update the apt's source list and include the sources of the packages.
RUN grep deb /etc/apt/sources.list | \
    sed 's/^deb/deb-src /g' >> /etc/apt/sources.list

# Install compiler, python and subversion.
RUN apt-get update && \
    apt-get install -y \
                    --no-install-recommends \
                    ca-certificates gnupg \
                    build-essential \
                    python \
                    wget \
                    unzip \
                    git \
                    curl \
                    gcc \
                    g++ \
                    clang \
                    ssh \
                    openssl \
                    libssl-dev && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get update && \
    apt-get install -y pkg-config

# Install a newer ninja release. It seems the older version in the debian repos
# randomly crashes when compiling llvm.
RUN wget "https://github.com/ninja-build/ninja/releases/download/v1.8.2/ninja-linux.zip" && \
    echo "d2fea9ff33b3ef353161ed906f260d565ca55b8ca0568fa07b1d2cab90a84a07 ninja-linux.zip" \
        | sha256sum -c  && \
    unzip ninja-linux.zip -d /usr/local/bin && \
    rm ninja-linux.zip

# Download, verify and install cmake version that can compile clang into /usr/local.
# (Version in debian8 repos is too old)
RUN mkdir /tmp/cmake-install && cd /tmp/cmake-install && \
    wget "https://cmake.org/files/v3.7/cmake-3.7.2-SHA-256.txt.asc" && \
    wget "https://cmake.org/files/v3.7/cmake-3.7.2-SHA-256.txt" && \
    #gpg --verify cmake-3.7.2-SHA-256.txt.asc cmake-3.7.2-SHA-256.txt && \
    wget "https://cmake.org/files/v3.7/cmake-3.7.2-Linux-x86_64.tar.gz" && \
    ( grep "cmake-3.7.2-Linux-x86_64.tar.gz" cmake-3.7.2-SHA-256.txt | \
      sha256sum -c - ) && \
    tar xzf cmake-3.7.2-Linux-x86_64.tar.gz -C /usr/local --strip-components=1 && \
    cd / && \
    rm -rf /tmp/cmake-install

RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"
RUN cargo --version

# ADD checksums /tmp/checksums
# ADD scripts /tmp/scripts

# Checkout the source code
RUN git clone --single-branch --branch solana-1.46 https://github.com/solana-labs/rust.git && \
    echo "$( cd rust && git rev-parse HEAD )  https://github.com/solana-labs/rust.git" >> ../rust_version.md
RUN git clone --single-branch --branch rust-1.46.0 https://github.com/rust-lang/cargo.git && \
    echo "$( cd cargo && git rev-parse HEAD )  https://github.com/rust-lang/cargo.git" >> ../cargo_version.md

RUN cd rust && \
    ./build.sh && \
    cd ..

RUN cd cargo && \
    cargo build --release && \
    cd ..

# Produce stage 2 docker with just the peices needed
FROM launcher.gcr.io/google/debian8:latest
LABEL maintainer "Solana Maintainers"
COPY --from=builder rust_version.md /usr/local
COPY --from=builder cargo_version.md /usr/local
COPY --from=builder /rust/build/x86_64-unknown-linux-gnu/stage1/ /usr/local
COPY --from=builder cargo/target/release/cargo /usr/local/bin

# # Install ld
# RUN apt-get update && \
#     apt-get install -y --no-install-recommends build-essential && \
#     rm -rf /var/lib/apt/lists/*
